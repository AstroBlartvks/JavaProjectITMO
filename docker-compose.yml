version: '3.8'

services:
  database:
    image: postgres:14-alpine
    container_name: astro-db
    environment:
      POSTGRES_DB: ${DB_NAME:-admin}
      POSTGRES_USER: ${DB_USER:-admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-admin} -d ${DB_NAME:-admin}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - astro-network

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: astro-server
    command:
      - ${GRPC_PORT}
      - ${DB_HOST}
      - ${DB_PORT}
      - ${DB_NAME}
      - ${DB_USER}
      - ${DB_PASSWORD}
    environment:
      GRPC_PORT: ${GRPC_PORT:-1488}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-astrodb}
      DB_USER: ${DB_USER:-admin}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      LOG4J_CONFIGURATION_FILE: /app/log4j2.xml
    ports:
      - "${GRPC_PORT:-1488}:${GRPC_PORT:-1488}"
      - "${DB_PORT:-5432}:${DB_PORT:-5432}"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - astro-network
    volumes:
      - ./logs:/app/logs  # Монтируем директорию логов

volumes:
  pgdata:

networks:
  astro-network:
    driver: bridge